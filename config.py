import math
import numpy as np

# Constants
# 30000
P = 30000
# 20000
N0 = 20000
# 0.8
A = 0.8
beta = 1 / 3
# 0.5
R = 0.5

A_index = 0

R_index = 0

P_index = 0

N0_index = 0

A_list = [
    0.10046876765255508,
    0.10421613362707405,
    0.11169607643461932,
    0.12287907615819016,
    0.13772099860690423,
    0.1561632694934859,
    0.17813310560021822,
    0.2035438020210507,
    0.23229507434625352,
    0.2642734544391665,
    0.29935273824309416,
    0.3373944838510635,
    0.37824855787278,
    0.42175372794253096,
    0.46773829902967234,
    0.5160207910404759,
    0.5664106550371473,
    0.6187090252474307,
    0.6727095038969584,
    0.7281989757669732,
    0.7849584492627324,
    0.8427639206732849,
    0.9013872582117808,
    0.9605971023474114,
    1.0201597788757781,
    1.079840221124222,
    1.1394028976525885,
    1.1986127417882195,
    1.2572360793267157,
    1.3150415507372681,
    1.371801024233027,
    1.4272904961030415,
    1.4812909747525695,
    1.5335893449628526,
    1.5839792089595242,
    1.6322617009703277,
    1.6782462720574693,
    1.7217514421272202,
    1.7626055161489367,
    1.800647261756906,
    1.8357265455608336,
    1.8677049256537464,
    1.8964561979789494,
    1.921866894399782,
    1.943836730506514,
    1.962279001393096,
    1.97712092384181,
    1.9883039235653808,
    1.9957838663729262,
    1.999531232347445,
]

R_list = [
    0.10022204783542082,
    0.10199711592861405,
    0.10554024673218809,
    0.11083745712756377,
    0.11786784144537571,
    0.12660365397059858,
    0.13701041844220863,
    0.14904706411523455,
    0.16266608784822534,
    0.1778137415764473,
    0.19443024443093937,
    0.21245001866629326,
    0.23180194846605368,
    0.25240966060435677,
    0.2741918258561606,
    0.2970624799665412,
    0.32093136291233293,
    0.34570427511720403,
    0.37128344921434875,
    0.3975679358896189,
    0.4244540022823469,
    0.451835541371556,
    0.47960449073189615,
    0.5076512590066685,
    0.5358651584148423,
    0.5641348415851578,
    0.5923487409933315,
    0.6203955092681039,
    0.6481644586284443,
    0.6755459977176533,
    0.7024320641103812,
    0.7287165507856513,
    0.7542957248827962,
    0.7790686370876672,
    0.8029375200334589,
    0.8258081741438394,
    0.8475903393956434,
    0.8681980515339465,
    0.8875499813337069,
    0.9055697555690607,
    0.922186258423553,
    0.9373339121517748,
    0.9509529358847656,
    0.9629895815577916,
    0.9733963460294015,
    0.9821321585546244,
    0.9891625428724364,
    0.9944597532678121,
    0.998002884071386,
    0.9997779521645793,
]

P_list = [
    10012.33599085671,
    10110.950884923,
    10307.791485121557,
    10602.080951531316,
    10992.657858076425,
    11477.980776144363,
    12056.134357900479,
    12724.836895290806,
    13481.449324901405,
    14322.985643135959,
    15246.12469060774,
    16247.223259238512,
    17322.330470336314,
    18467.203366908707,
    19677.323658675585,
    20947.91555369673,
    22273.96460624072,
    23650.23750651133,
    25071.302734130484,
    26531.551993867717,
    28025.22234901927,
    29546.418965086443,
    31089.13837399423,
    32647.29216703714,
    34214.73102304679,
    35785.26897695321,
    37352.70783296286,
    38910.861626005775,
    40453.581034913565,
    41974.77765098074,
    43468.44800613228,
    44928.697265869516,
    46349.76249348867,
    47726.03539375928,
    49052.08444630327,
    50322.67634132441,
    51532.7966330913,
    52677.66952966369,
    53752.77674076149,
    54753.87530939226,
    55677.01435686405,
    56518.550675098595,
    57275.163104709194,
    57943.865642099525,
    58522.019223855634,
    59007.34214192358,
    59397.919048468684,
    59692.20851487844,
    59889.049115076996,
    59987.66400914329,
]

N0_list = [
    612.1879589664277,
    709.6194743039232,
    904.0979873001015,
    1194.8559801129413,
    1580.7459637795073,
    2060.2450068306316,
    2631.460745605673,
    3292.1388525473158,
    4039.671933002588,
    4871.109815418327,
    5783.171194320446,
    6772.2565801276505,
    7834.462504692277,
    8965.596926505803,
    10161.195774771479,
    11416.540567052372,
    12726.677030965828,
    14086.434656433195,
    15490.447101320917,
    16933.1733699413,
    18408.91968083104,
    19911.861937505404,
    21436.068713506298,
    22975.524661032694,
    24524.154250770232,
    26075.84574922977,
    27624.475338967302,
    29163.931286493702,
    30688.138062494603,
    32191.08031916897,
    33666.8266300587,
    35109.55289867908,
    36513.56534356681,
    37873.32296903417,
    39183.459432947624,
    40438.80422522852,
    41634.403073494206,
    42765.537495307726,
    43827.74341987235,
    44816.82880567956,
    45728.89018458167,
    46560.328066997405,
    47307.861147452684,
    47968.53925439433,
    48539.754993169365,
    49019.25403622049,
    49405.14401988706,
    49695.9020126999,
    49890.38052569608,
    49987.81204103357,
]


# def get_chebyshev_array(n=10, a=0.1, b=0.5):
#     k = np.arange(n)
#     x = np.cos((2 * k + 1) * np.pi / (2 * n))
#     points = 0.5 * (a + b) + 0.5 * (b - a) * x
#     points = np.sort(points)  # 从小到大排序
#     return points.tolist()  # 转换为Python列表


# # 生成并打印点序列
# points_array = get_chebyshev_array(50, 0.1, 2)
# print(f"切比雪夫点数组(升序): {points_array}")


def increment_A():
    global A, A_index
    A_list += 1
    A = A_list[A_index]


def increment_P():
    global P, P_index
    P_index += 1
    P = P_list[P_index]


def increment_R():
    global R, R_index
    R_index += 1
    R = R_list[R_index]


def increment_N0():
    global N0, N0_index
    N0_index += 1
    N0 = N0_list[N0_index]


obj1_min = 0
obj1_max = 0
obj2_min = 0
obj2_max = 0
obj3_min = 0
obj3_max = 0
obj4_min = 0
obj4_max = 0


def set_obj_value(
    obj1_min_new, obj1_max_new, obj2_min_new, obj2_max_new, obj3_min_new, obj3_max_new, obj4_min_new, obj4_max_new
):
    global obj1_min, obj1_max, obj2_min, obj2_max, obj3_min, obj3_max, obj4_min, obj4_max
    obj1_min = obj1_min_new
    obj1_max = obj1_max_new
    obj2_min = obj2_min_new
    obj2_max = obj2_max_new
    obj3_min = obj3_min_new
    obj3_max = obj3_max_new
    obj4_min = obj4_min_new
    obj4_max = obj4_max_new


# Bounds
tourist_ratio_min = 0.01
tourist_ratio_max = 1.0

m1_min = 600
m1_max = 2000

m2_min = 300
m2_max = 500

rate_min = 0.1
rate_max = 0.5

alpha_min = 0
alpha_max = 1

B_min = 0
B_max = 1

B3_min = 0.15
B3_max = 1

B4_min = 0
B4_max = 0.75

k_min = 1e-4
k_max = 1e-2


# functions
def f_g(x):
    return math.tanh(x)


def f_w(x):
    return math.tanh(x)


def f_r(x):
    return math.tanh(x)


def f_infra(x):
    return math.tanh(x)
